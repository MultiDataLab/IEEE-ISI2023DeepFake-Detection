# -*- coding: utf-8 -*-
"""Copy of ASVspoof 2021.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13EcsXSZhy7mpvCY5wms13oGlrwucqles

This work is Asvspoof 2021- B03 for DF task pretrained model applied on our audio samples.
#The paper:
Delgado, H., Evans, N., Kinnunen, T., Lee, K. A., Liu, X., Nautsch, A., ... & Yamagishi, J. (2021). Asvspoof 2021: Automatic speaker verification spoofing and countermeasures challenge evaluation plan. arXiv preprint arXiv:2109.00535.
#The pre-print version:
Yamagishi, J., Wang, X., Todisco, M., Sahidullah, M., Patino, J., Nautsch, A., ... & Delgado, H. (2021). ASVspoof 2021: accelerating progress in spoofed and deepfake speech detection. arXiv preprint arXiv:2109.00537.
#The github:
https://github.com/asvspoof-challenge/2021

Requirements :
Linux with GPU support, conda, and python.

Python dependency:

Python 3 (test on python3.8)
Pytorch 1.6 and above (test on pytorch-1.6)
numpy (test on 1.18.1)
scipy (test on 1.4.1)
torchaudio (test on 0.6.0)
# librosa (0.8.0) with numba (0.48.0)

After trying the main model, we realized that the model stops when comes to some of our samples:(One MelGAN sample and all mimicry ones). This baseline is designed for mono channel audios, and the aforementioned audios are 2 channel.
"""

import os

! git clone https://github.com/asvspoof-challenge/2021

#!git clone --recursive https://github.com/asvspoof-challenge/2021.git

cd /content/2021/LA/Baseline-LFCC-LCNN/

cd /content/2021/DF/Baseline-LFCC-LCNN/

!source activate env.sh

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# source activate env.sh
# 
# python
# import sys
# # some simple python commands
# sys.path.append('/usr/local/lib/python3.6/site-packages')
# print(sys.path)
# 
# print("Python version")
# print(sys.version)

!conda update conda -y -q
!source /usr/local/etc/profile.d/conda.sh
!conda init
!conda install -n root _license -y -q

!bash /content/2021/DF/Baseline-LFCC-LCNN/env.sh

pip install activate pytorch-asvspoof2021

!torch --version

!which torch

!pip3 install http://download.pytorch.org/whl/cu92/torch-1.0.0-cp36-cp36m-linux_x86_64.whl

import torch
print(torch.__version__)

print(torchaudio.__version__)

print(torch.__version__)

import torch

#installation 1
!pip uninstall torch

!pip install torch==1.6.0

#installation 2
!pip3 install torch==1.7.1 -f https://download.pytorch.org/whl/torch_stable.html

import torch

print(torch.__version__)

"""#installing Conda"""

#installation
!pip install -q condacolab
import condacolab
condacolab.install()

!conda --version

import soundfile

#installation 4
!pip install soundfile

from torch import inf

"""#main model to be ran below"""

if torch.cuda.is_available():
    map_location=lambda storage, loc: storage.cuda()
else:
    map_location='cpu'

cd /content/2021/DF/Baseline-LFCC-LCNN/project/baseline_DF

#path to. our dataset wav format
#!bash 02_eval_alternative.sh /content/drive/MyDrive/MySelfVersionProjects/audio_sample/sample_set_3_split/Asvspoof2021_baseline_3_on_our_dataset/train_for_asvspoof2021_baseline pretrainedmofel /content/drive/MyDrive/MySelfVersionProjects/Codes/Sample_set_3_codes/ASVspoof_2021/df_trained_network.pt

import torch

#path to. our dataset which did not work (.flac format)
!bash 02_eval_alternative.sh /content/drive/MyDrive/MySelfVersionProjects/audio_sample/sample_set_3_split/Asvspoof2021_baseline_3_on_our_dataset/Train/train_for_asvspoof_2021_flac_format pretrainedmofel /content/drive/MyDrive/MySelfVersionProjects/Codes/Sample_set_3_codes/ASVspoof_2021/df_trained_network.pt

"""Mian model on our test data"""

#wav format (in config and config_auto change .flac to .wav)
#path to. our test dataset wav format
!bash 02_eval_alternative.sh /content/drive/MyDrive/MySelfVersionProjects/audio_sample/sample_set_3_split/Asvspoof2021_baseline_3_on_our_dataset/test_asvspoof_2021_baseline/test pretrainedmofel /content/drive/MyDrive/MySelfVersionProjects/Codes/Sample_set_3_codes/ASVspoof_2021/df_trained_network.pt

import numpy

#installation 5
!pip install numba==0.48.0

import scipy

print(scipy.__version__)

import numba

import torch

print(torch.__version__)

#installation 6
!pip install librosa==0.8.0

print(librosa.__version__)

import librosa

import torch
import torchaudio
import scipy

#installation 8
!pip install torchaudio==0.7.2

import torchaudio

"""# Results"""

df_train

df_train2 = pd.read_excel('/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/training+val_sample_set3.xlsx')

df_train2

df_train_final = df_train.merge(df_train2, how='left', on='clipID')

df_train_final

df_train_final.to_excel("output_train.xlsx")



df_test = pd.read_excel('LCNN test.xlsx')

df_test

df_test2 = pd.read_excel('/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/testing_sample_set3.xlsx')

df_test2

df_test_final = df_test.merge(df_test2, how='left', on='clipID')

df_test_final

df_test_final.to_excel("output_test.xlsx")

"""## Choosing the best performing threshold"""

import matplotlib.pyplot as plt
#from sklearn.datasets import make_classification
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

from sklearn import metrics
from sklearn.metrics import roc_auc_score

#read the data (results of the LCNN)
df_train = pd.read_excel('/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/LCNN results.xlsx', sheet_name='Train + Val')

df_train.iloc[0:13,:]

y_train = df_train['y_true']

Score = df_train['Score']

#Threshold 0
y_pred_train_binary = list(map(lambda x: 0 if x>0 else 1, Score))

cm = confusion_matrix(y_train, y_pred_train_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

fpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_train_binary)
auc = metrics.roc_auc_score(y_train, y_pred_train_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()

#threshold -3

y_pred_train_binary = list(map(lambda x: 0 if x>-3 else 1, Score))

cm = confusion_matrix(y_train, y_pred_train_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

"""tpr = 0.698 for threshold -3, accuracy is 59.5 for fake as positive
for real as positice it is tpr= 0.521
average tpr = 0.609
"""

fpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_train_binary)
auc = metrics.roc_auc_score(y_train, y_pred_train_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()



df_train['y_pred'] = y_pred_train_binary

df_train.to_excel(r'/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/pred_train_LCNN.xlsx', index=False)

df_test

#threshold -6



y_pred_train_binary = list(map(lambda x: 0 if x>-6 else 1, Score))

cm = confusion_matrix(y_train, y_pred_train_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

"""tpr = *0.602* for the thereshold -6 . accuracy 62

> Indented block


"""

fpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_train_binary)
auc = metrics.roc_auc_score(y_train, y_pred_train_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()

#threshold -10





y_pred_train_binary = list(map(lambda x: 0 if x>-10 else 1, Score))

cm = confusion_matrix(y_train, y_pred_train_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

fpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_train_binary)
auc = metrics.roc_auc_score(y_train, y_pred_train_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()

"""62.5 is accuracy for thereshold -10. The TPR is 43 percent, so we are lowering tpr with highering accuracy/ auc score which is not good (stopping to lowering the thereshold)."""



#threshold 2

y_pred_train_binary = list(map(lambda x: 0 if x>2 else 1, Score))

cm = confusion_matrix(y_train, y_pred_train_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

fpr, tpr, _ = metrics.roc_curve(y_train,  y_pred_train_binary)
auc = metrics.roc_auc_score(y_train, y_pred_train_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()

"""## applying the best performing threshold (-3) on the test set"""



#read the data (results of the LCNN)
df_test = pd.read_excel('/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/LCNN results.xlsx', sheet_name='Test')

df_test.iloc[0:13,:]

y_test = df_test['y_true']

Score = df_test['Score']

#Threshold -3
y_pred_test_binary = list(map(lambda x: 0 if x>-3 else 1, Score))

cm = confusion_matrix(y_test, y_pred_test_binary, labels=None)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

"""positive as fake ---> tpr = 0.717 fpr = 0.51
positive as real ---> tpr = 0.489 fpr=0.51
tpr avg = 0.603

"""

fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_test_binary)
auc = metrics.roc_auc_score(y_test, y_pred_test_binary)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.title('Receiver Operating Characteristic for the Training Data and the MFCCs features')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()

df_test['y_pred'] = y_pred_test_binary

df_test.to_excel(r'/content/drive/MyDrive/MySelfVersionProjects/datasets/Sample set 3/pred_test_LCNN.xlsx', index=False)

df_test